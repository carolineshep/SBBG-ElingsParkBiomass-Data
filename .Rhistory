clean_names() %>%
filter(species_id != "EMPTY") %>%
rename(width1_cm = width1_cm_widest_diameter, # changing column names to be less annoying
width2_cm = width2_cm_perpendicular_to_w1_measurement) %>%
mutate(width1_m = width1_cm/100,  #making a width column in meters instead of cm
width2_m = width2_cm/100,
height2_m = height_cm) %>%
mutate(veg_type = case_when(species_id == "BOBA" ~ "herb", # need to be able to sort by plant type for biomass equation
species_id == "STPU" ~ "herb",
species_id == "BRCA" ~ "herb",
species_id == "CAMA" ~ "herb",
species_id == "COFI" ~ "herb",
species_id == "EPCA" ~ "herb",
species_id == "GRCA" ~ "herb",
species_id == "LECO" ~ "herb",
species_id == "SODO" ~ "herb",
species_id == "SPAM" ~ "herb",
species_id == "ACGL" ~ "shrub",
species_id == "AGSH" ~ "shrub",
species_id == "ARCA" ~ "shrub",
species_id == "ATLE" ~ "shrub",
species_id == "BAPI" ~ "shrub",
species_id == "BEEM" ~ "shrub",
species_id == "ENCA" ~ "shrub",
species_id == "ERFA" ~ "shrub",
species_id == "EUMI" ~ "shrub",
species_id == "HEWH" ~ "shrub",
species_id == "ISME" ~ "shrub",
species_id == "LEGI" ~ "shrub",
species_id == "LYCA" ~ "shrub",
species_id == "MAFA" ~ "shrub",
species_id == "PEAR" ~ "shrub",
species_id == "RHCR" ~ "shrub",
species_id == "RHIN" ~ "shrub",
species_id == "SAAP" ~ "shrub")) %>%
mutate(mort_status = case_when(mortality_status == "A" ~ "1",
mortality_status == "D" ~ "0")) #changing A and D to 1 and 0 for easier coding
# Below, I work with changing characters for dates and other variables to be easier to work with
#checking the class of mortality_status column
class(elings_data$mortality_status)
#changing class to numeric
elings_data$mort_status <- as.numeric(elings_data$mort_status)
#checking to see if it worked
class(elings_data$mort_status)
#using lubridate to work with dates
elings_data$date_lbd <- parse_date_time(elings_data$date, "ymd")
#checking class of date columns
class(elings_data$date_lbd)
class(elings_data$date)
#Filtering to only work with current data (the first data collection was so soon after planting it makes more sense to analyze the more recent data)
elings_data <- elings_data %>%
filter(date > "2024-05-01")
# need to create function to calculate biomass - jk I made it in excel. Still might want to make it in R at some point
# group by plot and sum biomass
biomass_plot <- elings_data %>%
group_by(plot_id,
treatment) %>%
summarise(biomass_sum = sum(biomass_kg_m2))
# group by plot and sum mortality
# I double checked and this is correctly summing # of alive plants
mort_plot <- elings_data %>%
group_by(plot_id,
treatment) %>%
summarise(mort_sum = sum(mort_status, na.rm = TRUE))
# group by treatment and sum biomass
biomass_treatment <- elings_data %>%
group_by(treatment) %>%
summarise(biomass_sum = sum(biomass_kg_m2))
# group by treatment and sum mortality
mort_treatment <- elings_data %>%
group_by(treatment) %>%
summarise(mort_sum = sum(mort_status, na.rm = TRUE))
# Chunk 4
# explore the data! look at trends!
#graphing biomass by plot
plot_colors <- c("#223e48","#725610","#2d5360","#826313","#926f15","#335d6c","#A37C18","#396878")
ggplot(data = biomass_plot, aes(x = plot_id, y = biomass_sum, fill = plot_id)) +
geom_col() +
scale_fill_manual(values = plot_colors) +
theme_bw() +
labs(x = "Plot ID",
y = "Total Biomass (kg/m2)")
# graphing biomass by treatment
treatment_colors <- c("#A37C18", "#396878")
ggplot(data = biomass_treatment, aes(x = treatment, y = biomass_sum, fill = treatment)) +
geom_col() +
scale_fill_manual(values = treatment_colors) +
theme_bw() +
labs(x = "Treatment",
y = "Total Biomass (kg/m2)")
# graphing mortality by plot
plot_colors <- c("#223e48","#725610","#2d5360","#826313","#926f15","#335d6c","#A37C18","#396878")
ggplot(mort_plot, aes(x = plot_id, y = mort_sum, fill = plot_id)) +
geom_col() +
scale_fill_manual(values = plot_colors) +
theme_bw() +
labs(x = "Plot ID",
y = "Total Number of Live Plants")
# graphing mortality by treatment
treatment_colors <- c("#A37C18", "#396878")
ggplot(data = mort_treatment, aes(x = treatment, y = mort_sum, fill = treatment)) +
geom_col() +
scale_fill_manual(values = treatment_colors) +
theme_bw() +
labs(x = "Treatment",
y = "Total Number of Live Plants")
# Chunk 5
#calculating % plants alive in each plot
#filtering for only tarp treatment to see the total number of plants (both A and D)
tarp_filt <- elings_data %>%
filter(mortality_status == "D" | mortality_status == "A") %>%
filter(treatment == "tarp") %>%
count(mortality_status) %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total'))) %>%
rename(plant_count = n)
#filtering for only mulch treatment to see the total number of plants (both A and D)
mulch_filt <- elings_data %>%
filter(mortality_status == "D" | mortality_status == "A") %>%
filter(treatment == "mulch") %>%
count(mortality_status) %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total'))) %>%
rename(plant_count = n)
#stargazer(mulch_filt, summary = FALSE, type = "text")
#filtering for mortality data and grouping by plot
plot_filt <- elings_data %>%
group_by(plot_id) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2)) %>%
mutate(treatment = case_when(plot_id == "A" ~ "Tarp", # adding a treatment column
plot_id == "B" ~ "Mulch",
plot_id == "C" ~ "Tarp",
plot_id == "D" ~ "Mulch",
plot_id == "E" ~ "Mulch",
plot_id == "F" ~ "Tarp",
plot_id == "G" ~ "Mulch",
plot_id == "H" ~ "Tarp"))
#stargazer(plot_filt, summary = FALSE, type = "text")
#making a pretty table to show mortality data
plot_filt %>%
kable(caption = "Plot Mortality Status Data",
col.names = c("Plot ID","# Alive Plants","# Dead Plants", "Total","Proportion of plants alive", "Biomass kg/m2", "Treatment"),
format = "html",table.attr = "style = 'width:70%'",
digits = 2) %>%
kable_styling(bootstrap_options = "striped")
# filtering to get a dataset with region info
region_filt <- elings_data %>%
group_by(region) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
dead_prop = dead_pl / total,
biomass = sum(biomass_kg_m2))
region_filt %>%
kable(caption = "Regional Mortality Status Data",
col.names = c("Plot ID","# Alive Plants","# Dead Plants", "Total","Proportion of plants alive", "Proportion of Plants Dead", "Biomass kg/m2"),
format = "html",table.attr = "style = 'width:70%'",
digits = 2) %>%
kable_styling(bootstrap_options = "striped")
#filtering to get a dataset with province info for STPU
province_stpu <- elings_data %>%
filter(province_info == "SB" | province_info == "IRV" | province_info == "SD") %>%
filter(species_id == "STPU") %>%
group_by(province_info) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2),
biomass_per_pl = biomass / alive_pl)
#making a table to display STPU province information
province_stpu %>%
kable(caption = "Stipa Pulchra Province Data",
col.names = c("Province Info", "# Alive Plants", "# Dead Plants", "Total", "Proportion of plants alive", "Total Biomass kg/m2", "Biomass kg/m2 per plant"),
format = "html", table.attr = "style = 'width:80%;'",
digits = 2) %>%
kable_styling(bootstrap_options = "striped")
#stargazer(province_stpu, summary = FALSE, type = "text")
#filtering to get a dataset with province info for EPCA
province_epca <- elings_data %>%
filter(province_info == "SB" | province_info == "IRV" | province_info == "SD") %>%
filter(species_id == "EPCA") %>%
group_by(province_info) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2),
biomass_per_pl = biomass / alive_pl)
#making a table to display EPCA province info
province_epca %>%
kable(caption = "Epilobium Canum Province Data",
col.names = c("Province Info", "# Alive Plants", "# Dead Plants", "Total","Proportion of plants alive", "Biomass kg/m2", "Biomass kg/m2 per plant"),
format = "html", table.attr = "style = 'width:80%;'",
digits = 2) %>%
kable_styling(bootstrap_options = c("hover", "condensed"))
#stargazer(province_epca, type = "text", summary = FALSE)
# Chunk 6
#creating new dataset to look at data by species
# gathering species data
species_data <- elings_data %>%
group_by(species_id) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2),
biomass_per_pl = biomass / alive_pl)
#plotting species data for avg biomass
# plotting species and biomass
ggplot(data = species_data, aes(x = species_id, y = biomass)) +
geom_col() +
theme_bw() +
labs(x = "Species",
y = "Average Biomass (kg/m2) per plant")
#plotting % alive for each species
# plotting species and proportion of living plants
ggplot(data = species_data, aes(x = species_id, y = alive_prop)) +
geom_col() +
theme_bw() +
labs(x = "Species",
y = "Proportion of living plants")
#table to display species data
stargazer(species_data, type = "text", summary = FALSE,
report = "vc*",
df = FALSE,
header = FALSE,
digits = 3,
covariate.labels = c("Sample", "Species ID", "Living Plants", "Dead Plants", "Total Plants", "Proportion Alive", "Proportion Dead", "Total Biomass", "Average Biomass per Plant"))
#stargazer(species_data, type = "html", summary = FALSE)
# making a table to show mortality and biomass by species
species_data %>%
kable(caption = "Mortality and Biomass data by Species",
col.names = c("Species", "# Alive Plants", "# Dead Plants", "Total # Plants","Proportion of plants alive", "Total Biomass kg/m2", "Biomass kg/m2 per plant"),
format = "html",
table.attr = "style = 'width:80%;'",
digits = 2,
na.rm = TRUE) %>%
kable_styling(bootstrap_options = c("hover", "condensed"))
# Chunk 7
# Statistical analysis
# Lets see if the biomass in treatments is significantly different
#I don't think ill have time to do this!!
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
# read in packages
library(janitor) #helps clean data, idk if it does anything else
library(tidyverse) #helps clean and manipulate data
library(here) #helps read in data
library(dplyr) #helps with data analysis
library(stargazer) #helps make pretty tables to show data in knitted html or to save as png
library(lubridate) #helps R recognize dates
library(kableExtra) #this was blocked by IT for a bit, but it's working now and I like it for making tables better than stargazer
library(kableExtra)
# Chunk 3
# read in the data
# Make sure you have the most updated data
elings_data <- read.csv(here("ElingsMonitoringData_2024July.csv")) %>%
clean_names() %>%
filter(species_id != "EMPTY") %>%
rename(width1_cm = width1_cm_widest_diameter, # changing column names to be less annoying
width2_cm = width2_cm_perpendicular_to_w1_measurement) %>%
mutate(width1_m = width1_cm/100,  #making a width column in meters instead of cm
width2_m = width2_cm/100,
height2_m = height_cm) %>%
mutate(veg_type = case_when(species_id == "BOBA" ~ "herb", # need to be able to sort by plant type for biomass equation
species_id == "STPU" ~ "herb",
species_id == "BRCA" ~ "herb",
species_id == "CAMA" ~ "herb",
species_id == "COFI" ~ "herb",
species_id == "EPCA" ~ "herb",
species_id == "GRCA" ~ "herb",
species_id == "LECO" ~ "herb",
species_id == "SODO" ~ "herb",
species_id == "SPAM" ~ "herb",
species_id == "ACGL" ~ "shrub",
species_id == "AGSH" ~ "shrub",
species_id == "ARCA" ~ "shrub",
species_id == "ATLE" ~ "shrub",
species_id == "BAPI" ~ "shrub",
species_id == "BEEM" ~ "shrub",
species_id == "ENCA" ~ "shrub",
species_id == "ERFA" ~ "shrub",
species_id == "EUMI" ~ "shrub",
species_id == "HEWH" ~ "shrub",
species_id == "ISME" ~ "shrub",
species_id == "LEGI" ~ "shrub",
species_id == "LYCA" ~ "shrub",
species_id == "MAFA" ~ "shrub",
species_id == "PEAR" ~ "shrub",
species_id == "RHCR" ~ "shrub",
species_id == "RHIN" ~ "shrub",
species_id == "SAAP" ~ "shrub")) %>%
mutate(mort_status = case_when(mortality_status == "A" ~ "1",
mortality_status == "D" ~ "0")) #changing A and D to 1 and 0 for easier coding
# Below, I work with changing characters for dates and other variables to be easier to work with
#checking the class of mortality_status column
class(elings_data$mortality_status)
#changing class to numeric
elings_data$mort_status <- as.numeric(elings_data$mort_status)
#checking to see if it worked
class(elings_data$mort_status)
#using lubridate to work with dates
elings_data$date_lbd <- parse_date_time(elings_data$date, "ymd")
#checking class of date columns
class(elings_data$date_lbd)
class(elings_data$date)
#Filtering to only work with current data (the first data collection was so soon after planting it makes more sense to analyze the more recent data)
elings_data <- elings_data %>%
filter(date > "2024-05-01")
# need to create function to calculate biomass - jk I made it in excel. Still might want to make it in R at some point
# group by plot and sum biomass
biomass_plot <- elings_data %>%
group_by(plot_id,
treatment) %>%
summarise(biomass_sum = sum(biomass_kg_m2))
# group by plot and sum mortality
# I double checked and this is correctly summing # of alive plants
mort_plot <- elings_data %>%
group_by(plot_id,
treatment) %>%
summarise(mort_sum = sum(mort_status, na.rm = TRUE))
# group by treatment and sum biomass
biomass_treatment <- elings_data %>%
group_by(treatment) %>%
summarise(biomass_sum = sum(biomass_kg_m2))
# group by treatment and sum mortality
mort_treatment <- elings_data %>%
group_by(treatment) %>%
summarise(mort_sum = sum(mort_status, na.rm = TRUE))
# Chunk 4
# explore the data! look at trends!
#graphing biomass by plot
plot_colors <- c("#223e48","#725610","#2d5360","#826313","#926f15","#335d6c","#A37C18","#396878")
ggplot(data = biomass_plot, aes(x = plot_id, y = biomass_sum, fill = plot_id)) +
geom_col() +
scale_fill_manual(values = plot_colors) +
theme_bw() +
labs(x = "Plot ID",
y = "Total Biomass (kg/m2)")
# graphing biomass by treatment
treatment_colors <- c("#A37C18", "#396878")
ggplot(data = biomass_treatment, aes(x = treatment, y = biomass_sum, fill = treatment)) +
geom_col() +
scale_fill_manual(values = treatment_colors) +
theme_bw() +
labs(x = "Treatment",
y = "Total Biomass (kg/m2)")
# graphing mortality by plot
plot_colors <- c("#223e48","#725610","#2d5360","#826313","#926f15","#335d6c","#A37C18","#396878")
ggplot(mort_plot, aes(x = plot_id, y = mort_sum, fill = plot_id)) +
geom_col() +
scale_fill_manual(values = plot_colors) +
theme_bw() +
labs(x = "Plot ID",
y = "Total Number of Live Plants")
# graphing mortality by treatment
treatment_colors <- c("#A37C18", "#396878")
ggplot(data = mort_treatment, aes(x = treatment, y = mort_sum, fill = treatment)) +
geom_col() +
scale_fill_manual(values = treatment_colors) +
theme_bw() +
labs(x = "Treatment",
y = "Total Number of Live Plants")
# Chunk 5
#calculating % plants alive in each plot
#filtering for only tarp treatment to see the total number of plants (both A and D)
tarp_filt <- elings_data %>%
filter(mortality_status == "D" | mortality_status == "A") %>%
filter(treatment == "tarp") %>%
count(mortality_status) %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total'))) %>%
rename(plant_count = n)
#filtering for only mulch treatment to see the total number of plants (both A and D)
mulch_filt <- elings_data %>%
filter(mortality_status == "D" | mortality_status == "A") %>%
filter(treatment == "mulch") %>%
count(mortality_status) %>%
bind_rows(summarise(., across(where(is.numeric), sum),
across(where(is.character), ~'Total'))) %>%
rename(plant_count = n)
#stargazer(mulch_filt, summary = FALSE, type = "text")
#filtering for mortality data and grouping by plot
plot_filt <- elings_data %>%
group_by(plot_id) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2)) %>%
mutate(treatment = case_when(plot_id == "A" ~ "Tarp", # adding a treatment column
plot_id == "B" ~ "Mulch",
plot_id == "C" ~ "Tarp",
plot_id == "D" ~ "Mulch",
plot_id == "E" ~ "Mulch",
plot_id == "F" ~ "Tarp",
plot_id == "G" ~ "Mulch",
plot_id == "H" ~ "Tarp"))
#stargazer(plot_filt, summary = FALSE, type = "text")
#making a pretty table to show mortality data
plot_filt %>%
kable(caption = "Plot Mortality Status Data",
col.names = c("Plot ID","# Alive Plants","# Dead Plants", "Total","Proportion of plants alive", "Biomass kg/m2", "Treatment"),
format = "html",table.attr = "style = 'width:70%'",
digits = 2) %>%
kable_styling(bootstrap_options = "striped")
# filtering to get a dataset with region info
region_filt <- elings_data %>%
group_by(region) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
dead_prop = dead_pl / total,
biomass = sum(biomass_kg_m2))
region_filt %>%
kable(caption = "Regional Mortality Status Data",
col.names = c("Plot ID","# Alive Plants","# Dead Plants", "Total","Proportion of plants alive", "Proportion of Plants Dead", "Biomass kg/m2"),
format = "html",table.attr = "style = 'width:70%'",
digits = 2) %>%
kable_styling(bootstrap_options = "striped")
#filtering to get a dataset with province info for STPU
province_stpu <- elings_data %>%
filter(province_info == "SB" | province_info == "IRV" | province_info == "SD") %>%
filter(species_id == "STPU") %>%
group_by(province_info) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2),
biomass_per_pl = biomass / alive_pl)
#making a table to display STPU province information
province_stpu %>%
kable(caption = "Stipa Pulchra Province Data",
col.names = c("Province Info", "# Alive Plants", "# Dead Plants", "Total", "Proportion of plants alive", "Total Biomass kg/m2", "Biomass kg/m2 per plant"),
format = "html", table.attr = "style = 'width:80%;'",
digits = 2) %>%
kable_styling(bootstrap_options = "striped")
#stargazer(province_stpu, summary = FALSE, type = "text")
#filtering to get a dataset with province info for EPCA
province_epca <- elings_data %>%
filter(province_info == "SB" | province_info == "IRV" | province_info == "SD") %>%
filter(species_id == "EPCA") %>%
group_by(province_info) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2),
biomass_per_pl = biomass / alive_pl)
#making a table to display EPCA province info
province_epca %>%
kable(caption = "Epilobium Canum Province Data",
col.names = c("Province Info", "# Alive Plants", "# Dead Plants", "Total","Proportion of plants alive", "Biomass kg/m2", "Biomass kg/m2 per plant"),
format = "html", table.attr = "style = 'width:80%;'",
digits = 2) %>%
kable_styling(bootstrap_options = c("hover", "condensed"))
#stargazer(province_epca, type = "text", summary = FALSE)
# Chunk 6
#creating new dataset to look at data by species
# gathering species data
species_data <- elings_data %>%
group_by(species_id) %>%
summarise(alive_pl = sum(mortality_status == "A"),
dead_pl = sum(mortality_status == "D"),
total = alive_pl + dead_pl,
alive_prop = alive_pl / total,
biomass = sum(biomass_kg_m2),
biomass_per_pl = biomass / alive_pl)
#plotting species data for avg biomass
# plotting species and biomass
ggplot(data = species_data, aes(x = species_id, y = biomass)) +
geom_col() +
theme_bw() +
labs(x = "Species",
y = "Average Biomass (kg/m2) per plant")
#plotting % alive for each species
# plotting species and proportion of living plants
ggplot(data = species_data, aes(x = species_id, y = alive_prop)) +
geom_col() +
theme_bw() +
labs(x = "Species",
y = "Proportion of living plants")
#table to display species data
stargazer(species_data, type = "text", summary = FALSE,
report = "vc*",
df = FALSE,
header = FALSE,
digits = 3,
covariate.labels = c("Sample", "Species ID", "Living Plants", "Dead Plants", "Total Plants", "Proportion Alive", "Proportion Dead", "Total Biomass", "Average Biomass per Plant"))
#stargazer(species_data, type = "html", summary = FALSE)
# making a table to show mortality and biomass by species
species_data %>%
kable(caption = "Mortality and Biomass data by Species",
col.names = c("Species", "# Alive Plants", "# Dead Plants", "Total # Plants","Proportion of plants alive", "Total Biomass kg/m2", "Biomass kg/m2 per plant"),
format = "html",
table.attr = "style = 'width:80%;'",
digits = 2,
na.rm = TRUE) %>%
kable_styling(bootstrap_options = c("hover", "condensed"))
# Chunk 7
# Statistical analysis
# Lets see if the biomass in treatments is significantly different
#I don't think ill have time to do this!!
